"""
Django settings for rental_backend project.

Generated by 'django-admin startproject' using Django 5.2.3.
"""

import firebase_admin
from firebase_admin import credentials
from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-development-key')

# Firebase configuration
FIREBASE_CREDENTIALS = os.path.join(BASE_DIR, 'firebase_service_account.json')

# Initialize Firebase
cred = credentials.Certificate(FIREBASE_CREDENTIALS)
firebase_admin.initialize_app(cred)

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'accounts.firebase_auth_backend.FirebaseAuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',  # Fallback to default
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']  # For development only

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'DEBUG',  # Show all messages
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'rental_backend': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'accounts': {  # Add this logger for the accounts app
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'payments': {  # Add this logger for the payments app
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {  # Root logger
        'handlers': ['console'],
        'level': 'INFO',  # Changed from DEBUG
    },
}

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'agents',
    'property_manager',
    'django_filters',
    
    # Third-party apps
    'rest_framework',
    'corsheaders',
    
    # Local apps
    'accounts',
    'landlords',
    'tenants',
    'properties',
    'units',
    'payments',
    'communications',
    'lease',
    'django_celery_results',
]

MIDDLEWARE = [
    'rental_backend.urls.LoggingMiddleware',  # Custom logging middleware
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'accounts.middleware.FirebaseTokenMiddleware',  # <-- Removed: now handled by DRF authentication class
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # <-- Must come after SessionMiddleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

print("\n=== DJANGO MIDDLEWARE STACK AT STARTUP ===", flush=True)
for idx, mw in enumerate(MIDDLEWARE):
    print(f"{idx+1}. {mw}", flush=True)
print("========================================\n", flush=True)


ROOT_URLCONF = 'rental_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rental_backend.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'accounts.authentication.FirebaseDRFAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'rental_backend.permissions.IsLandlord',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
       
    ],
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = False  # Change this to False since we're specifying origins
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:8000",
    "https://properties.infiniasync.com"
]
CORS_ALLOW_CREDENTIALS = True

# CSRF Settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:8000",
    "https://properties.infiniasync.com"
]
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to CSRF token
CSRF_USE_SESSIONS = False  # Store CSRF token in cookie instead of session
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'accounts.firebase_auth_backend.FirebaseAuthenticationBackend',  # Custom Firebase backend
    'django.contrib.auth.backends.ModelBackend',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
CORS_EXPOSE_HEADERS = ['Content-Type', 'Authorization']

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
# Modify these Celery settings
CELERY_TASK_STORE_EAGER_RESULT = False  # Change to False
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_WORKER_ENABLE_REMOTE_CONTROL = True  # Enable remote control
CELERY_TASK_ANNOTATIONS = None

# Modify the root logger level
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'DEBUG',  # Show all messages
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'rental_backend': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'accounts': {  # Add this logger for the accounts app
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {  # Root logger
        'handlers': ['console'],
        'level': 'WARNING',  # Change from INFO to WARNING to reduce noise
    },
}
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True  # Add this line
CELERY_TASK_EAGER_PROPAGATES = True  # Ensure exceptions are propagated in eager mode


# Celery Beat Schedule Configuration
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'generate-monthly-invoices': {
        'task': 'payments.tasks.generate_monthly_invoices',
        'schedule': crontab(day_of_month='1', hour='0', minute='0'),  # Run at midnight on the 1st of every month
    },
}

# AfricasTalking Configuration
SMS_RATE_LIMIT_PER_HOUR = 100  # Adjust as needed
AFRICASTALKING_SENDER_ID = 'INFINIASYNC'
AFRICASTALKING_USERNAME = 'infinia-sms'
AFRICASTALKING_API_KEY = 'atsk_1fbf89b1459380329c3260a4083d1d1254a6f17c4835686a3e3bb080927a270940a9c115'
